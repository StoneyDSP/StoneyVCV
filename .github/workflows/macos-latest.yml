name: macos

on:
  # Runs on all pushes
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: macos-latest-${{ github.ref }}
  cancel-in-progress: true

env:
  DISPLAY: :0
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  VCPKG_MAX_CONCURRENCY: 3
  VCPKG_DEFAULT_TRIPLET: "x64-osx"
  VCPKG_DEFAULT_HOST_TRIPLET: "x64-osx"
  VCPKG_OSX_ARCHITECTURES: "x86_64"
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  VCPKG_OVERLAY_PORTS: ${{ github.workspace }}/dep/vcpkg/ports
  BUILD_DIR: ${{ github.workspace }}/build
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCCACHE_GHA_ENABLED: "true"
  SCCACHE_CACHE_MULTIARCH: 1
  SCCACHE_RECACHE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  RACK_SDK_VERSION: 2.5.2
  RACK_SDK_PLATFORM: "mac-x64+arm64"


jobs:
  macos:
    runs-on: macos-latest

    steps:

    - name: Checkout StoneyVCV code
      uses: actions/checkout@v4
      with:
        submodules: true

      # https://vcvrack.com/manual/Building#Setting-up-your-development-environment
    - name: Install VCV's macOS Deps
      run: |
        brew install git wget cmake autoconf automake libtool jq python zstd pkg-config sccache ninja tree

    - name: Deps
      uses: johnwason/vcpkg-action@v6
      with:
        # vcpkg triplet to use
        triplet: x64-osx
        # GitHub token to authenticate API requests. Recommended to use  github.token
        token: ${{ github.token }}
        # Directory containing vcpkg.json manifest file. Cannot be used with pkgs.
        manifest-dir: ${{ github.workspace }}
        # Use vcpkg built-in GitHub binary caching. If not specified, will use the dry-run based file cache.
        github-binarycache: false
        pkgs: catch2 simde vcpkg-cmake-config vcpkg-cmake sse2neon

    - name: Configure Tests
      run: >-
        cmake
        -S ${{ github.workspace }}
        -B ${{ env.BUILD_DIR }}
        -DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/install
        -DCMAKE_TOOLCHAIN_FILE:FILEPATH=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_OSX_ARCHITECTURES:STRING="x86_64"
        -DVCPKG_HOST_TRIPLET:STRING="x64-osx"
        -DVCPKG_TARGET_TRIPLET:STRING="x64-osx"
        -DSTONEYVCV_BUILD_TESTS:BOOL=TRUE
        -G "Ninja"
        --compile-no-warning-as-error
        --no-warn-unused-cli

    - name: Build Tests
      run: >-
        cmake
        --build ${{ env.BUILD_DIR }}
        --target Tests_StoneyVCV
        -j3

    - name: Test
      run: >-
        cd ${{ env.BUILD_DIR }} &&
        ctest
        -j3
        --rerun-failed
        --output-on-failure
        --verbose
        && cd ${{ github.workspace }}

    # If tests succeeded; deploy plugin bundle

    - name: Fetch Rack SDK
      run: |
        curl https://vcvrack.com/downloads/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip -o ./dep/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd dep
        unzip Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd ..

    - name: Build
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make build -j3

    - name: Dist
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make dist -j3

    - name: Install
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make install -j3

    # List all files in tree
    - name: List
      run: tree

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: StoneyVCV-2.0.1-mac-arm64.vcvplugin
        path: '${{ github.workspace }}/dist/StoneyVCV-2.0.1-mac-arm64.vcvplugin'

    - name: Get Artifacts
      uses: actions/download-artifact@v4
