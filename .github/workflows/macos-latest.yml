name: macos

on:
  # Runs on all pushes
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: macos-latest-${{ github.ref }}
  cancel-in-progress: true

env:
  DISPLAY: :0
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  CMAKE_INSTALL_PARALLEL_LEVEL: 3
  VCPKG_MAX_CONCURRENCY: 3
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  BUILD_DIR: ${{ github.workspace }}/build
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCCACHE_GHA_ENABLED: "true"
  SCCACHE_CACHE_MULTIARCH: 1
  SCCACHE_RECACHE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  RACK_SDK_VERSION: 2.5.2
  RACK_SDK_PLATFORM: "mac-x64+arm64"


jobs:
  macos:
    runs-on: macos-latest

    steps:

      # REQUIREMENTS

      # https://vcvrack.com/manual/Building#Setting-up-your-development-environment
    - name: Install VCV's macOS Deps
      run: |
        brew install git wget cmake autoconf automake libtool jq python zstd pkg-config sccache ninja tree

    - name: checkout StoneyVCV
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: vcpkg install
      uses: johnwason/vcpkg-action@v6
      with:
        # vcpkg triplet to use
        triplet: arm64-osx
        # GitHub token to authenticate API requests. Recommended to use  github.token
        token: ${{ github.token }}
        # Directory containing vcpkg.json manifest file. Cannot be used with pkgs.
        manifest-dir: ${{ github.workspace }}
        # Use vcpkg built-in GitHub binary caching. If not specified, will use the dry-run based file cache.
        github-binarycache: false
        pkgs: catch2 simde vcpkg-cmake-config vcpkg-cmake sse2neon

    # - name: Bootstrap vcpkg
    #   shell: bash
    #   run: "${{ github.workspace }}/dep/vcpkg/bootstrap-vcpkg.sh"

    # - name: Enable GitHub Actions Cache backend
    #   uses: actions/github-script@v7
    #   with:
    #     script: |
    #       core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
    #       core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    # - name: Build ports
    #   shell: bash
    #   run: ${{ github.workspace }}/vcpkg/vcpkg install
    #   env:
    #     # X_VCPKG_ASSET_SOURCES: "clear;x-azurl,https://your.domain.com/container,${{ secrets.SAS }},readwrite"
    #     VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    #     VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/dep/vcpkg/ports"

    - name: get Rack Executable
      shell: bash
      run: |
        brew install --cask vcv-rack

      # For now, we still need to fetch the SDK's Makefile helpers manually...
    - name: get Rack SDK
      shell: bash
      run: |
        curl https://vcvrack.com/downloads/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip -o ./dep/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd dep
        unzip Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd ..

    # - name: Configure Tests
    #   run: >-
    #     cmake
    #     --preset arm64-osx-release
    #     --fresh

    # - name: Build Tests
    #   run: >-
    #     cmake
    #     --build ${{ env.BUILD_DIR }}
    #     --preset arm64-osx-release
    #     --target tests
    #     -j 3

    # - name: Test
    #   run: >-
    #     ctest
    #     --test-dir ${{ env.BUILD_DIR }}
    #     --preset arm64-osx-release
    #     -j 3

    # - name: Install
    #   run: >-
    #     cmake
    #     --install ${{ env.BUILD_DIR }}
    #     --prefix ${{ github.workspace }}/install
    #     --strip
    #     -j 3

    - name: make dep
      shell: bash
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make dep -j 3

    - name: make
      shell: bash
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make -j 3

    - name: make dist
      shell: bash
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make dist -j 3

    - name: make install
      shell: bash
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make install -j 3

    - name: make workflow
      shell: bash
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make workflow -j 3

    # List all files in tree
    - name: tree
      shell: bash
      run: tree

    - name: upload vcvplugin
      uses: actions/upload-artifact@v4
      with:
        name: StoneyDSP-StoneyVCV-2.0.972-mac-arm64.vcvplugin
        path: '${{ github.workspace }}/dist/StoneyDSP-StoneyVCV-2.0.972-mac-arm64.vcvplugin'

    - name: upload .sh
      uses: actions/upload-artifact@v4
      with:
        name: StoneyVCV-2.0.972-Darwin.sh
        path: ${{ github.workspace }}/dist/StoneyVCV-2.0.972-Darwin.sh

    - name: upload .tar.gz
      uses: actions/upload-artifact@v4
      with:
        name: StoneyVCV-2.0.972-Darwin.tar.gz
        path: ${{ github.workspace }}/dist/StoneyVCV-2.0.972-Darwin.tar.gz

    - name: download
      uses: actions/download-artifact@v4
