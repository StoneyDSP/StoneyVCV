name: windows

on:
  # Runs on all pushes
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: windows-latest-${{ github.ref }}
  cancel-in-progress: true

env:
  DISPLAY: :0
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  CMAKE_INSTALL_PARALLEL_LEVEL: 3
  VCPKG_MAX_CONCURRENCY: 3
  VCPKG_MANIFEST_MODE: ON
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  BUILD_DIR: build
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCCACHE_GHA_ENABLED: "true"
  RACK_SDK_VERSION: 2.5.2
  RACK_SDK_PLATFORM: "win-x64"
  MSYSTEM: "MINGW64"
  # STONEYVCV_VERSION_MAJOR: ${{ vars.STONEYVCV_VERSION_MAJOR }}
  # STONEYVCV_VERSION_MINOR: ${{ vars.STONEYVCV_VERSION_MINOR }}
  # STONEYVCV_VERSION_PATCH: ${{ vars.STONEYVCV_VERSION_PATCH }}
  # STONEYVCV_VERSION: ${{ vars.STONEYVCV_VERSION_MAJOR }}.${{ vars.STONEYVCV_VERSION_MINOR }}.${{ vars.STONEYVCV_VERSION_PATCH }}

jobs:
  windows:
    runs-on: windows-latest
    # defaults:
    #   run:
    #     shell: msys2 {0}

    steps:

      # Requirements

    - name: install winget
      uses: Cyberboss/install-winget@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: install VCV's MSYS2 Deps
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          --needed
          base-devel
          git
          curl
          wget
          make
          tar
          unzip
          ccache
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gdb
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-catch
          mingw-w64-x86_64-ninja
          autoconf
          automake
          libtool
          mingw-w64-x86_64-jq
          python
          zstd
          mingw-w64-x86_64-pkgconf
          tree
          ninja

    - name: checkout StoneyVCV
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    # https://vcvrack.com/manual/Building#Setting-up-your-development-environment
    - name: get Rack Executable
      run: winget install VCVRack.VCVRack --disable-interactivity --accept-source-agreements

    # CI helpers
    - name: Enable GitHub Actions Cache backend
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: make version
      shell: bash
      run: |
        STONEYVCV_VERSION_MAJOR=$(make version-major)
        STONEYVCV_VERSION_MINOR=$(make version-minor)
        STONEYVCV_VERSION_PATCH=$(make version-patch)
        STONEYVCV_VERSION_TWEAK=$(make version-tweak)
        STONEYVCV_VERSION_BUILD=$(make version-build)
        STONEYVCV_VERSION_PACKAGE=$(make version-package)
        STONEYVCV_VERSION=$(make version)

        EOF=$(uuidgen)
        echo "STONEYVCV_CONFIG<<$EOF" >> $GITHUB_ENV
        echo "STONEYVCV_VERSION_MAJOR=$STONEYVCV_VERSION_MAJOR" >> $GITHUB_ENV
        echo "STONEYVCV_VERSION_MINOR=$STONEYVCV_VERSION_MINOR" >> $GITHUB_ENV
        echo "STONEYVCV_VERSION_PATCH=$STONEYVCV_VERSION_PATCH" >> $GITHUB_ENV
        echo "STONEYVCV_VERSION_TWEAK=$STONEYVCV_VERSION_TWEAK" >> $GITHUB_ENV
        echo "STONEYVCV_VERSION_BUILD=$STONEYVCV_VERSION_BUILD" >> $GITHUB_ENV
        echo "STONEYVCV_VERSION_PACKAGE=$STONEYVCV_VERSION_PACKAGE" >> $GITHUB_ENV
        echo "STONEYVCV_VERSION=$STONEYVCV_VERSION" >> $GITHUB_ENV
        echo "$EOF" >> $GITHUB_ENV
        echo "$STONEYVCV_CONFIG"

    # - name: Build ports
    #   shell: msys2 {0}
    #   run: ${{ github.workspace }}/vcpkg/vcpkg install
    #   env:
    #     # X_VCPKG_ASSET_SOURCES: "clear;x-azurl,https://your.domain.com/container,${{ secrets.SAS }},readwrite"
    #     VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    #     VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/dep/vcpkg/ports"

    # Deployment workflow

    - name: make dep
      shell: msys2 {0}
      run: make dep -j 3

    - name: make workflow
      shell: msys2 {0}
      run: make workflow -j 3

    # Developer worflow

    - name: make
      shell: msys2 {0}
      run: make -j 3

    - name: make dist
      shell: msys2 {0}
      run: make dist -j 3

    - name: make install
      shell: msys2 {0}
      run: make install -j 3

    # List all artefact directories

    - name: tree
      shell: msys2 {0}
      run: |
        tree ./dist
        tree ./install

    # Upload build artefacts

    - name: upload .vcvplugin
      uses: actions/upload-artifact@v4
      with:
        name: StoneyDSP-StoneyVCV-${{ env.STONEYVCV_VERSION }}-win-x64.vcvplugin
        path: '${{ github.workspace }}/dist/StoneyDSP-StoneyVCV-${{ env.STONEYVCV_VERSION }}-win-x64.vcvplugin'

    - name: upload .exe
      uses: actions/upload-artifact@v4
      with:
        name: StoneyVCV-${{ env.STONEYVCV_VERSION }}-win64.exe
        path: ${{ github.workspace }}/install/StoneyVCV-${{ env.STONEYVCV_VERSION }}-win64.exe

    # Download build artefacts

    - name: download
      uses: actions/download-artifact@v4
