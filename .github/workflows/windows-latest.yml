name: windows

on:
  # Runs on all pushes
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: windows-latest-${{ github.ref }}
  cancel-in-progress: true

env:
  DISPLAY: :0
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  CMAKE_INSTALL_PARALLEL_LEVEL: 3
  VCPKG_MAX_CONCURRENCY: 3
  VCPKG_MANIFEST_MODE: ON
  VCPKG_ROOT: "vcpkg"
  BUILD_DIR: build
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCCACHE_GHA_ENABLED: "true"
  RACK_SDK_VERSION: 2.5.2
  RACK_SDK_PLATFORM: "win-x64"
  MSYSTEM: "MINGW64"

jobs:
  windows:
    runs-on: windows-latest
    # defaults:
    #   run:
    #     shell: msys2 {0}

    steps:

      # REQUIREMENTS

    - name: Checkout StoneyVCV code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install winget
      uses: Cyberboss/install-winget@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # https://vcvrack.com/manual/Building#Setting-up-your-development-environment
    - name: Install VCVRack2Free
      run: winget install VCVRack.VCVRack --disable-interactivity --accept-source-agreements

    - name: Use MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          --needed
          base-devel
          git
          curl
          wget
          make
          tar
          unzip
          ccache
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gdb
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-catch
          mingw-w64-x86_64-ninja
          autoconf
          automake
          libtool
          mingw-w64-x86_64-jq
          python
          zstd
          mingw-w64-x86_64-pkgconf
          tree
          ninja

      # DEVELOPER WORKFLOW

    - name: Checkout StoneyVCV code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: vcpkg install
      uses: johnwason/vcpkg-action@v6
      with:
        # vcpkg triplet to use
        triplet: x64-mingw-dynamic
        # GitHub token to authenticate API requests. Recommended to use  github.token
        token: ${{ github.token }}
        # Directory containing vcpkg.json manifest file. Cannot be used with pkgs.
        manifest-dir: ${{ github.workspace }}
        # Use vcpkg built-in GitHub binary caching. If not specified, will use the dry-run based file cache.
        github-binarycache: false
        pkgs: catch2 simde vcpkg-cmake-config vcpkg-cmake

    # - name: Bootstrap vcpkg
    #   shell: msys2 {0}
    #   run: "${{ github.workspace }}/dep/vcpkg/bootstrap-vcpkg.sh"

    # - name: Enable GitHub Actions Cache backend
    #   uses: actions/github-script@v7
    #   with:
    #     script: |
    #       core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
    #       core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    # - name: Build ports
    #   shell: msys2 {0}
    #   run: ${{ github.workspace }}/vcpkg/vcpkg install
    #   env:
    #     # X_VCPKG_ASSET_SOURCES: "clear;x-azurl,https://your.domain.com/container,${{ secrets.SAS }},readwrite"
    #     VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    #     VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/dep/vcpkg/ports"

    - name: Make Workflow
      shell: msys2 {0}
      run: make workflow -j 3

    # - name: Configure Tests
    #   shell: msys2 {0}
    #   run: >-
    #     cmake
    #     --preset x64-windows-release
    #     --fresh

    # - name: Build Tests
    #   shell: msys2 {0}
    #   run: >-
    #     cmake
    #     --build ${{ env.BUILD_DIR }}
    #     --preset x64-windows-release
    #     --target tests
    #     -j 3

    # - name: Test
    #   shell: msys2 {0}
    #   run: >-
    #     ctest
    #     --test-dir ${{ env.BUILD_DIR }}
    #     --preset x64-windows-release
    #     -j 3

    # - name: Install
    #   shell: msys2 {0}
    #   run: >-
    #     cmake
    #     --install ${{ env.BUILD_DIR }}
    #     --prefix ${PWD}/install
    #     --strip
    #     -j 3

      # DEPLOYMENT WORKFLOW

    - name: Fetch Rack SDK
      shell: msys2 {0}
      run: |
        curl https://vcvrack.com/downloads/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip -o ./dep/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd dep
        unzip Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd ..

    - name: Dep
      shell: msys2 {0}
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make dep -j 3

    - name: Build
      shell: msys2 {0}
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make -j3

    - name: Dist
      shell: msys2 {0}
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make dist -j3

    - name: Install
      shell: msys2 {0}
      env:
        RACK_DIR: ${{ github.workspace }}/dep/Rack-SDK
      run: make install -j3

    # List all files in tree
    - name: Tree
      shell: msys2 {0}
      run: tree

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: StoneyDSP-StoneyVCV-2.0.1-win-x64.vcvplugin
        path: '${{ github.workspace }}/dist/StoneyDSP-StoneyVCV-2.0.1-win-x64.vcvplugin'

    - name: Get Artifacts
      uses: actions/download-artifact@v4
