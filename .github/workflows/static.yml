# Simple workflow for deploying static content to GitHub Pages
name: GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["production"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  CMAKE_INSTALL_PARALLEL_LEVEL: 3
  VCPKG_MAX_CONCURRENCY: 3
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  RACK_SDK_VERSION_MAJOR: 2
  RACK_SDK_VERSION: 2.5.2
  RACK_SDK_PLATFORM: "lin-x64"
  # STONEYVCV_VERSION_MAJOR: ${{ vars.STONEYVCV_VERSION_MAJOR }}
  # STONEYVCV_VERSION_MINOR: ${{ vars.STONEYVCV_VERSION_MINOR }}
  # STONEYVCV_VERSION_PATCH: ${{ vars.STONEYVCV_VERSION_PATCH }}
  # STONEYVCV_VERSION: ${{ vars.STONEYVCV_VERSION_MAJOR }}.${{ vars.STONEYVCV_VERSION_MINOR }}.${{ vars.STONEYVCV_VERSION_PATCH }}

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:

      - name: checkout StoneyVCV
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install VCV's Linux Deps
        run: |
          sudo apt-get update && sudo apt install coreutils make doxygen ninja-build cmake graphviz

      - name: get Rack Executable
        shell: bash
        run: |
          curl https://vcvrack.com/downloads/RackFree-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip -o ${{ github.workspace }}/dep/RackFree-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
          unzip -q ${{ github.workspace }}/dep/RackFree-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip -d ${{ github.workspace }}/dep

      # CI helpers
      - name: Enable GitHub Actions Cache backend
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      # Output package name (don't do this at home)
      - name: make version
        shell: bash
        run: |
          echo STONEYVCV_VERSION_MAJOR=${{ env.RACK_SDK_VERSION_MAJOR }} >> $GITHUB_ENV
          echo STONEYVCV_VERSION_MINOR=0 >> $GITHUB_ENV
          echo STONEYVCV_VERSION_PATCH=$(git rev-list HEAD | wc -l | awk '{$1=$1};1') >> $GITHUB_ENV
          echo STONEYVCV_VERSION_TWEAK=$(git rev-parse HEAD | awk '{$1=$1};1') >> $GITHUB_ENV
          echo STONEYVCV_VERSION_BUILD=$(git rev-parse --short HEAD | awk '{$1=$1};1') >> $GITHUB_ENV
          echo STONEYVCV_VERSION_PACKAGE=${{ env.RACK_SDK_VERSION_MAJOR }}.0.$(git rev-list HEAD | wc -l | awk '{$1=$1};1') >> $GITHUB_ENV
          echo STONEYVCV_VERSION=${{ env.RACK_SDK_VERSION_MAJOR }}.0.$(git rev-list HEAD | wc -l | awk '{$1=$1};1') >> $GITHUB_ENV
          echo STONEYVCV_GIT_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD | awk '{$1=$1};1') >> $GITHUB_ENV

      - name: Configure StoneyVCV
        working-directory: ${{ github.workspace }}
        run: make configure

      - name: Make Doxygen
        working-directory: ${{ github.workspace }}
        run: doxygen ${{ github.workspace }}/docs/Doxyfile

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload HTML
          path: '${{ github.workspace }}/build/docs/html'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
