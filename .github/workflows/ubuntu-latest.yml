name: ubuntu

on:
  # Runs on all pushes
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ubuntu-latest-${{ github.ref }}
  cancel-in-progress: true

env:
  DISPLAY: :0
  BUILD_DIR: ${{ github.workspace }}/build
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  CMAKE_INSTALL_PARALLEL_LEVEL: 3
  VCPKG_MAX_CONCURRENCY: 3
  SCCACHE_GHA_ENABLED: "true"
  RACK_SDK_VERSION: 2.5.2
  RACK_SDK_PLATFORM: "lin-x64"
  STONEYVCV_VERSION_MAJOR: ${{ vars.STONEYVCV_VERSION_MAJOR }}
  STONEYVCV_VERSION_MINOR: ${{ vars.STONEYVCV_VERSION_MINOR }}
  STONEYVCV_VERSION_PATCH: ${{ vars.STONEYVCV_VERSION_PATCH }}
  STONEYVCV_VERSION: ${{ vars.STONEYVCV_VERSION_MAJOR }}.${{ vars.STONEYVCV_VERSION_MINOR }}.${{ vars.STONEYVCV_VERSION_PATCH }}


jobs:
  ubuntu:
    runs-on: ubuntu-latest

    steps:

    # Requirements

    # https://vcvrack.com/manual/Building#Setting-up-your-development-environment
    - name: Install VCV's Linux Deps
      shell: bash
      run: |
        sudo apt-get update
        sudo apt install unzip git gdb curl cmake libx11-dev libglu1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zlib1g-dev libasound2-dev libgtk2.0-dev libgtk-3-dev libjack-jackd2-dev jq zstd libpulse-dev pkg-config ninja-build ccache tree

    - name: checkout StoneyVCV
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: get Rack Executable
      shell: bash
      run: |
        curl https://vcvrack.com/downloads/RackFree-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip -o ./dep/RackFree-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd dep
        unzip RackFree-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd ..

    - name: Enable GitHub Actions Cache backend
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    # - name: Build ports
    #   shell: bash
    #   run: ${{ github.workspace }}/vcpkg/vcpkg install
    #   env:
    #     # X_VCPKG_ASSET_SOURCES: "clear;x-azurl,https://your.domain.com/container,${{ secrets.SAS }},readwrite"
    #     VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    #     VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/dep/vcpkg/ports"

    # Deployment workflow

    - name: make dep
      shell: bash
      run: make dep -j 3

    - name: make workflow
      shell: bash
      run: make workflow -j 3

    # Developer worflow

    - name: make
      shell: bash
      run: make -j 3

    - name: make dist
      shell: bash
      run: make dist -j 3

    - name: make install
      shell: bash
      run: make install -j 3

    # List all artefact directories

    - name: tree
      shell: bash
      run: |
        tree ${{ github.workspace }}/dist
        tree ${{ github.workspace }}/install

    # Upload build artefacts

    - name: upload vcvplugin
      uses: actions/upload-artifact@v4
      with:
        name: StoneyDSP-StoneyVCV-${{ env.STONEYVCV_VERSION }}-lin-x64.vcvplugin
        path: ${{ github.workspace }}/dist/StoneyDSP-StoneyVCV-${{ env.STONEYVCV_VERSION }}-lin-x64.vcvplugin

    - name: upload .sh
      uses: actions/upload-artifact@v4
      with:
        name: StoneyVCV-${{ env.STONEYVCV_VERSION }}-Linux.sh
        path: ${{ github.workspace }}/dist/StoneyVCV-${{ env.STONEYVCV_VERSION }}-Linux.sh

    - name: upload .tar.gz
      uses: actions/upload-artifact@v4
      with:
        name: StoneyVCV-${{ env.STONEYVCV_VERSION }}-Linux.tar.gz
        path: ${{ github.workspace }}/dist/StoneyVCV-${{ env.STONEYVCV_VERSION }}-Linux.tar.gz

    - name: upload .tar.Z
      uses: actions/upload-artifact@v4
      with:
        name: StoneyVCV-${{ env.STONEYVCV_VERSION }}-Linux.tar.Z
        path: ${{ github.workspace }}/dist/StoneyVCV-${{ env.STONEYVCV_VERSION }}-Linux.tar.Z

    # Download build artefacts

    - name: download
      uses: actions/download-artifact@v4
