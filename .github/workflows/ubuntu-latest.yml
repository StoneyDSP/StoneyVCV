name: ubuntu

on:
  # Runs on all pushes
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ubuntu-latest-${{ github.ref }}
  cancel-in-progress: true

env:
  DISPLAY: :0
  BUILD_DIR: ${{ github.workspace }}/build
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  VCPKG_MAX_CONCURRENCY: 3
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  VCPKG_OVERLAY_PORTS: ${{ github.workspace }}/dep/vcpkg/ports
  SCCACHE_GHA_ENABLED: "true"

  # RACK_SDK_VERSION: 2.5.2
  # RACK_SDK_PLATFORM: "lin-x64"

jobs:
  ubuntu:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout StoneyVCV code
      uses: actions/checkout@v4
      with:
        submodules: true

      # https://vcvrack.com/manual/Building#Setting-up-your-development-environment
    - name: Install VCV's Linux Deps
      run: |
        sudo apt-get update && sudo apt install unzip git gdb curl cmake libx11-dev libglu1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zlib1g-dev libasound2-dev libgtk2.0-dev libgtk-3-dev libjack-jackd2-dev jq zstd libpulse-dev pkg-config ninja-build ccache tree

      # sudo /usr/bin/Xvfb $DISPLAY

    - name: Set Up Build Cache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: vcpkg install
      uses: johnwason/vcpkg-action@v6
      with:
        # vcpkg triplet to use
        triplet: x64-linux
        # GitHub token to authenticate API requests. Recommended to use  github.token
        token: ${{ github.token }}
        # Directory containing vcpkg.json manifest file. Cannot be used with pkgs.
        manifest-dir: ${{ github.workspace }}
        # Use vcpkg built-in GitHub binary caching. If not specified, will use the dry-run based file cache.
        github-binarycache: true
        pkgs: catch2 simde vcpkg-cmake-config vcpkg-cmake

    - name: Configure Tests
      run: >-
        cmake
        -S ${{ github.workspace }}
        -B ${{ env.BUILD_DIR }}
        -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install
        -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
        -DVCPKG_HOST_TRIPLET:STRING=x64-linux
        -DVCPKG_TARGET_TRIPLET:STRING=x64-linux
        -DSTONEYVCV_BUILD_TESTS:BOOL=TRUE
        -G "Ninja"
        --compile-no-warning-as-error
        --no-warn-unused-cli

    - name: Build Tests
      run: >-
        cmake
        --build ${{ env.BUILD_DIR }}
        --target Tests_StoneyVCV
        -j3

    - name: Test
      run: >-
        cd ${{ env.BUILD_DIR }} &&
        ctest
        -j3
        --rerun-failed
        --output-on-failure
        --verbose
        && cd ${{ github.workspace }}

    # curl https://vcvrack.com/downloads/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip -o ./dep/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
    # cd dep
    # unzip Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
    # cd ..

    # - name: Build
    #   run: >-
    #     cmake
    #     --build ${{ env.BUILD_DIR }}
    #     --target plugin
    #     -j3

    # - name: Dist
    #   run: >-
    #     cmake
    #     --build ${{ env.BUILD_DIR }}
    #     --target dist
    #     -j3

    # - name: Install
    #   run: make install -j3

    # List all files in tree
    - name: Tree
      run: tree

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: StoneyVCV-2.0.0-lin-x64.vcvplugin
        path: ${{ github.workspace }}/dist/StoneyVCV-2.0.0-lin-x64.vcvplugin

    - name: Get Artifacts
      uses: actions/download-artifact@v4
