name: windows

on:
  # Runs on all pushes
  push:
  # # A push is made to a GitHub Pages-enabled branch
  # page_build:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: windows-latest-${{ github.ref }}
  cancel-in-progress: true

env:
  DISPLAY: :0
  SCCACHE_GHA_ENABLED: "true"
  RACK_SDK_VERSION: 2.5.2
  RACK_SDK_PLATFORM: "win-x64"
  RACK_DIR: ${{ github.workspace }}\dep\Rack-SDK
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp
  MSYSTEM: "MINGW64"

jobs:
  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
      
    steps:
    
    - name: Checkout StoneyVCV code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Use MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          git
          curl
          wget
          make
          tar
          unzip
          ccache
          mingw-w64-x86_64-gcc 
          mingw-w64-x86_64-gdb 
          mingw-w64-x86_64-cmake 
          autoconf 
          automake 
          libtool 
          mingw-w64-x86_64-jq 
          python 
          zstd 
          mingw-w64-x86_64-pkgconf

    - name: Cache IPP
      id: cache-ipp
      uses: actions/cache@v4
      with:
        key: ipp-v4
        path: C:\Program Files (x86)\Intel

    - name: Install IPP
      if: (steps.cache-ipp.outputs.cache-hit != 'true')
      shell: bash
      run: |
        curl --output oneapi.exe https://registrationcenter-download.intel.com/akdlm/IRC_NAS/8d158661-ca8f-4e66-b5ea-3e0b3d00836a/w_ipp_oneapi_p_2021.10.1.15_offline.exe
        ./oneapi.exe -s -x -f oneapi
        ./oneapi/bootstrapper.exe -s -c --action install --components=intel.oneapi.win.ipp.devel --eula=accept -p=NEED_VS2022_INTEGRATION=1 --log-dir=.

    - name: Save IPP cache (even on CI fail)
      if: (steps.cache-ipp.outputs.cache-hit != 'true')
      uses: actions/cache/save@v4
      with:
        path: C:\Program Files (x86)\Intel
        key: ipp-v4

    - name: Install Ninja
      shell: bash
      run: choco install ninja sccache
        
      # https://vcvrack.com/manual/Building#Setting-up-your-development-environment
    - name: Install VCV's Windows Deps
      run: |
        sudo apt-get update && sudo apt install unzip git gdb curl cmake libx11-dev libglu1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zlib1g-dev libasound2-dev libgtk2.0-dev libgtk-3-dev libjack-jackd2-dev jq zstd libpulse-dev pkg-config
        sudo /usr/bin/Xvfb $DISPLAY &
        curl https://vcvrack.com/downloads/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip -o ./dep/Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd dep
        unzip Rack-SDK-${{env.RACK_SDK_VERSION}}-${{env.RACK_SDK_PLATFORM}}.zip
        cd ..

    - name: Set Up Build Cache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Build
      run: make

    - name: Install
      run: make install

#     - name: Test
#       run: ???

    - name: Dist
      run: make dist

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: StoneyVCV-2.0.0-lin-x64.vcvplugin
        path: '${{ github.workspace }}/dist/StoneyVCV-2.0.0-lin-x64.vcvplugin'

    - name: Get Artifacts
      uses: actions/download-artifact@v4
